"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are
all figurate (polygonal) numbers and are generated by the following formulae:

Triangle    P3,n=n(n+1)/2   1, 3, 6, 10, 15, ...
Square      P4,n=n2         1, 4, 9, 16, 25, ...
Pentagonal  P5,n=n(3n-1)/2  1, 5, 12, 22, 35, ...
Hexagonal   P6,n=n(2n-1)    1, 6, 15, 28, 45, ...
Heptagonal  P7,n=n(5n-3)/2  1, 7, 18, 34, 55, ...
Octagonal   P8,n=n(3n-2)    1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
interesting properties.

1. The set is cyclic, in that the last two digits of each number is the first
two digits of the next number (including the last number with the first).
2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
pentagonal (P5,44=2882), is represented by a different number in the set.
3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which
each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and
octagonal, is represented by a different number in the set.
"""

def generate_triangular_numbers(first, last):
    return [n * (n + 1) / 2 for n in range(first, last)]

def generate_square_numbers(first, last):
    return [n**2 for n in range(first, last)]

def generate_pentagonal_numbers(first, last):
    return [n * (3*n - 1) / 2 for n in range(first, last)]

def generate_hexagonal_numbers(first, last):
    return [n * (2*n - 1) for n in range(first, last)]

def generate_heptagonal_numbers(first, last):
    return [n * (5*n - 3) / 2 for n in range(first, last)]

def generate_octagonal_numbers(first, last):
    return [n * (3*n - 2) for n in range(first, last)]

def generate_4_digit_set(f_gen):
    return set([x for x in f_gen(1, 2000) if x >= 1000 and x <= 9999])

def generate_2_digit_map(figurate_numbers):
    result = {}
    for n in list(figurate_numbers):
        result.setdefault(str(n)[:2], []).append(str(n)[2:])
    return result

triangular = generate_4_digit_set(generate_triangular_numbers)
square = generate_4_digit_set(generate_square_numbers)
pentagonal = generate_4_digit_set(generate_pentagonal_numbers)
hexagonal = generate_4_digit_set(generate_hexagonal_numbers)
heptagonal = generate_4_digit_set(generate_heptagonal_numbers)
octagonal = generate_4_digit_set(generate_octagonal_numbers)

triangular_map = generate_2_digit_map(triangular)
square_map = generate_2_digit_map(square)
pentagonal_map = generate_2_digit_map(pentagonal)
hexagonal_map = generate_2_digit_map(hexagonal)
heptagonal_map = generate_2_digit_map(heptagonal)
octagonal_map = generate_2_digit_map(octagonal)

def find_solution_rec(vals, rem_maps, next_prefix):
    if len(rem_maps) == 0:
        return [[int(x) for x in vals]]
    else:
        solutions = []
        for rem_map_idx, rem_map in enumerate(rem_maps):
            if next_prefix in rem_map:
                for suffix in rem_map[next_prefix]:
                    solution = find_solution_rec(
                        vals + [next_prefix + suffix],
                        rem_maps[:rem_map_idx] + rem_maps[rem_map_idx+1:],
                        suffix
                    )
                    if solution:
                        solutions += solution
        return solutions

def find_solution(maps):
    first_map, rem_maps = maps[0], maps[1:]
    for prefix, suffixes in first_map.iteritems():
        for suffix in suffixes:
            solutions = find_solution_rec([prefix + suffix], rem_maps, suffix)
            for solution in solutions:
                if (solution and len(solution) == len(maps)
                    and str(solution[-1])[2:] == str(solution[0])[:2]):
                    return solution
    return []

print sum(find_solution([
    triangular_map,
    square_map,
    pentagonal_map,
    hexagonal_map,
    heptagonal_map,
    octagonal_map
]))

